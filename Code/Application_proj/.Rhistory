test_obj <- generate_set_3(n_obs = 10000)
saveRDS(test_obj, file = 'Results/synth_input3.RDS')
# save in largeList format on NvME SSD
OutDetectR::largeListify(
func_dat = test_obj$data,
path = '~/Documents/tmp_data/synth_data3.llo'
)
# get measuring intervals
synth_ints <- OutDetectR::measuring_int_mat(test_obj$data)
# get unique measuring intervals
unique_intervals <- OutDetectR::unique_intervals(synth_ints)
### Use Sampling procedure for reduced data set
# create cluster
cl <- makeForkCluster(10)
# set different seeds just to be sure
clusterCall(cl = cl, fun = function(i) {
set.seed(as.numeric(Sys.getpid()))
print(as.numeric(Sys.getpid()))}
)
# try using the sampling procedure
test_procedure <- OutDetectR::stretch_sample_detection(
cl = cl, list_path = '~/Documents/tmp_data/synth_data3.llo',
measuring_intervals = synth_ints, lambda = 1.2,
sample_size = sample_size, expn = 8, alpha = 0.05, B = 100, gamma = 0.05,
debug = TRUE
)
stopCluster(cl)
saveRDS(test_procedure, file = 'Results/synth_sample3.RDS')
View(test_procedure)
View(test_obj)
test_procedure[["certainties"]][1:100]
# save in largeList format on NvME SSD
OutDetectR::largeListify(
func_dat = test_obj$data,
path = '~/Documents/tmp_data/synth_data3.llo'
)
### clear workspace
rm(list = ls())
### load necessary CRAN libraries
library(MASS)
library(tidyverse)
library(largeList)
library(parallel)
library(Rcpp)
### load my own library
install.packages('../OutDetectR_1.0.tar.gz', repos = NULL, type = 'source')
library(OutDetectR)
version_check()
### set up parameters
# sample size for sampling procedure
sample_size <- 250
# generate synthetic test set
test_obj <- readRDS(file = 'Results/synth_input3.RDS')
# generate new observation
new_obj <- generate_set_3(n_obs = 1)
# get measuring intervals
synth_ints <- OutDetectR::measuring_int_mat(test_obj$data)
# get unique measuring intervals
unique_intervals <- OutDetectR::unique_intervals(synth_ints)
# load results from original test
test_procedure <- readRDS(file = 'Results/synth_sample3.RDS')
# create cluster
cl <- makeForkCluster(5)
# set different seeds just to be sure
clusterCall(cl = cl, fun = function(i) {
set.seed(as.numeric(Sys.getpid()))
print(as.numeric(Sys.getpid()))}
)
# run updating procedure
update_procedure <- OutDetectR::stretch_sample_updating(
cl = cl, new_observation = new_obj$data[[1]], list_path = '~/Documents/tmp_data/synth_data3.llo',
lambda = 1.2, measuring_intervals = synth_ints, sample_size = sample_size, expn = 8,
alpha = 0.05, B = 100, gamma = 0.05, num_samples_prev = test_procedure$num_samples,
num_outliers_prev = test_procedure$num_outliers, debug = TRUE)
stopCluster(cl)
saveRDS(update_procedure, file = 'Results/synth_update.RDS')
test <- update_procedure$num_samples[10001]
tes
test
update_procedure$num_outliers[10001]
update_procedure$certainties[10001]
library(OutDetectR)
# generate new observation
new_obj <- generate_set_3(n_obs = 1)
### clear workspace
rm(list = ls())
### load necessary CRAN libraries
library(MASS)
library(tidyverse)
library(largeList)
library(parallel)
library(Rcpp)
# generate new observation
new_obj <- generate_set_3(n_obs = 1)
View(new_obj)
# generate new observation
new_obj <- generate_set_3(n_obs = 1)$data[[1]]
View(new_obj)
### clear workspace
rm(list = ls())
### load necessary CRAN libraries
library(MASS)
library(tidyverse)
library(largeList)
library(parallel)
library(Rcpp)
### load my own library
# install.packages('../OutDetectR_1.0.tar.gz', repos = NULL, type = 'source')
library(OutDetectR)
version_check()
### set up parameters
# sample size for sampling procedure
sample_size <- 250
# generate synthetic test set
test_obj <- generate_set_2(n_obs = 10000)
saveRDS(test_obj, file = 'Results/synth_input2.RDS')
# save in largeList format on NvME SSD
OutDetectR::largeListify(
func_dat = test_obj$data,
path = '~/Documents/tmp_data/synth_data2.llo'
)
# get measuring intervals
synth_ints <- OutDetectR::measuring_int_mat(test_obj$data)
# get unique measuring intervals
unique_intervals <- OutDetectR::unique_intervals(synth_ints)
### Use Sampling procedure for reduced data set
# create cluster
cl <- makeForkCluster(10)
# set different seeds just to be sure
clusterCall(cl = cl, fun = function(i) {
set.seed(as.numeric(Sys.getpid()))
print(as.numeric(Sys.getpid()))}
)
# try using the sampling procedure
test_procedure <- OutDetectR::stretch_sample_detection(
cl = cl, list_path = '~/Documents/tmp_data/synth_data2.llo',
measuring_intervals = synth_ints, lambda = 1,
sample_size = sample_size, expn = 10, alpha = 0.05, B = 100, gamma = 0.05,
debug = TRUE
)
stopCluster(cl)
saveRDS(test_procedure, file = 'Results/synth_sample2.RDS')
View(test_procedure)
library(shiny)
library(shinydashboard)
library(tidyverse)
### load data for different data sets
# set 1:
set_1_summary <- readRDS(file = "./data/Set_1/summary.RDS")
set_1_tibble <- readRDS(file = "./data/Set_1/shiny_tibble.RDS")
# set 2:
set_2_tibble <- readRDS(file = "data/Set_2/shiny_tibble.RDS")
set_2_summary <- list(original = unique(set_2_tibble$ids[which(set_2_tibble$outlier == TRUE)]))
# set 3:
set_3_tibble <- readRDS(file = "data/Set_3/shiny_tibble.RDS")
set_3_summary <- list(original = unique(set_3_tibble$ids[which(set_3_tibble$outlier == TRUE)]))
header <- dashboardHeader(
title = "Outlier Detection"
)
sidebar <- dashboardSidebar(
selectInput("SET", "Data Set",
c("Data Set 1" = "set_1",
"Data Set 2" = "set_2",
"Data Set 3" = "set_3")),
sliderInput("OUT_THR", "Observations over which certainty threshold shall be marked as outliers?", min = 0, max = 1, value = 0.5, step = 0.01),
sliderInput("CERT_THR", "Show observations with certainty values over this threshold:", min = 0, max = 1, value = 0.5, step = 0.01),
numericInput("OBS_ID", "Which observation do you want to highlight?", value = NA),
numericInput("L_BORDER", "What is the lower bound of the window you want to see?", value = NA),
numericInput("R_BORDER", "What is the upper bound of the window you want to see?", value = NA)
)
body <- dashboardBody(
column(width = 12,
fluidRow(width = 12,
column(width = 7,
box(title = "Description",
width = 9, h4("This dashboard visualizes the method of outlier detection used in the project. \n"))),
column(width = 5,
infoBox("Observations", textOutput("n_obs"), icon = icon("list")),
infoBox("Flagged", textOutput("nflagged"), icon = icon("list")))
)
),
fluidRow(width = 12,
box(width = 12,
title = "Plotted Observations",
plotOutput("my_plot"))
),
fluidRow(width = 12,
column(12,
tabBox(width = 12,
title = 'Information',
tabPanel("Flagged Observations",
h3("Flagged observations: "),
h4(textOutput("flagged")),
),
tabPanel("Missed Outliers",
h3("Missed Outliers: "),
h4(textOutput("missed")),
),
tabPanel("False Outliers:",
h3("False outliers: "),
h4(textOutput("false")),
)
)
)
)
)
ui <- dashboardPage(
header,
sidebar,
body
)
server <- function(input, output, session) {
my_tibble <- reactive({
if(input$SET == "set_1"){my_tibble <- set_1_tibble}
if(input$SET == "set_2"){my_tibble <- set_2_tibble}
if(input$SET == "set_3"){my_tibble <- set_3_tibble}
my_tibble
})
info_list <- reactive({
if(input$SET == "set_1"){info_list <- set_1_summary}
if(input$SET == "set_2"){info_list <- set_2_summary}
if(input$SET == "set_3"){info_list <- set_3_summary}
info_list
})
show_which <- reactive({
tmp <- my_tibble()
if(input$SET == "set_1"){
show_which <- 1:(dim(tmp)[1])
} else{
CERT_THR <- input$CERT_THR
show_which <- sort(unique(c(which(tmp$cert >= CERT_THR),
which(tmp$ids == input$OBS_ID))))
}
show_which
})
out_which <- reactive({
tmp <- my_tibble()
if(input$SET == "set_1"){
out_which <- unique(tmp$ids[which(tmp$flagged == TRUE)])
} else{
OUT_THR <- input$OUT_THR
out_which <- unique(tmp$ids[which(tmp$cert >= OUT_THR)])
}
out_which
})
output$n_obs <- renderText(length(unique(my_tibble()$ids))) # works
output$flagged <- renderText(out_which())
output$nflagged <- renderText(length(out_which()))
output$missed <- renderText(setdiff(info_list()$original, out_which()))
output$false <- renderText(setdiff(out_which(), info_list()$original))
sizes <- reactive({
tmp <- my_tibble()
s <- rep(0.1, times = dim(tmp)[1])
focus <- which(tmp$ids == input$OBS_ID)
s[focus] <- 5
s
})
output$my_plot <- renderPlot({
plot_tibble <- my_tibble()[show_which(),]
if(input$SET != "set_1"){
ggplot(data = plot_tibble) +
geom_line(aes(x = x, y = y, col = cert, group = ids), alpha = 50/length(unique(plot_tibble$ids[show_which()]))) +
geom_line(data = plot_tibble[which(plot_tibble$ids == input$OBS_ID),],
aes(x = x, y = y), col = "black", lwd = 0.5) +
scale_color_gradient(low = "#0062ff", high = "#ff0000") +
theme(text=element_text(size=16, family="Serif")) +
xlim(ifelse(!is.na(input$L_BORDER), input$L_BORDER, 0), ifelse(!is.na(input$R_BORDER), input$R_BORDER, 1)) +
guides(col = "none")
} else{
ggplot(data = plot_tibble) +
geom_line(aes(x = x, y = y, col = !flagged, group = ids), alpha = 50/length(unique(plot_tibble$ids[show_which()]))) +
geom_line(data = plot_tibble[which(plot_tibble$ids == input$OBS_ID),],
aes(x = x, y = y), col = "black", lwd = 0.5) +
theme(text=element_text(size=16, family="Serif")) +
xlim(ifelse(!is.na(input$L_BORDER), input$L_BORDER, 0), ifelse(!is.na(input$R_BORDER), input$R_BORDER, 1)) +
guides(col = "none")
}
})
}
shinyApp(ui, server)
results <- readRDS(file = '~/F/data_local/Projekt_AMEIUS_Daten/stretch_sample_test.RDS')
tibble <- readRDS(file = '~/F/data_local/Projekt_AMEIUS_Daten/schra_tibble_list.RDS')
View(tibble)
results <- readRDS(file = '~/F/data_local/Projekt_AMEIUS_Daten/20kRun/stretch_sample_test.RDS')
View(results)
results[["certainties"]]
library(largeList)
curves <- readList(file = '~/F/data_local/Projekt_AMEIUS_Daten/20kRun/test_data.llo'))
curves <- readList(file = '~/F/data_local/Projekt_AMEIUS_Daten/20kRun/test_data.llo')
ids <- readRDS(file = '~/F/data_local/Projekt_AMEIUS_Daten/20kRun/test_ids.RDS')
View(curves)
# transform curves into tibble for plotting
plot_tibble <- tibble(args = unlist(map(.x = curves,
.f = function(c) c$args)))
library(tidyverse)
# transform curves into tibble for plotting
plot_tibble <- tibble(args = unlist(map(.x = curves,
.f = function(c) c$args)))
# transform curves into tibble for plotting
plot_tibble <- tibble(args = unlist(map(.x = curves,
.f = function(c) c$args)),
vals = unlist(map(.x = curves,
.f = function(c) c$vals)))
# transform curves into tibble for plotting
plot_tibble <- tibble(ids = unlist(map(.x = 1:length(curves),
.f = function(i) rep(ids[i], times = length(curves[[i]])))),
args = unlist(map(.x = curves,
.f = function(c) c$args)),
vals = unlist(map(.x = curves,
.f = function(c) c$vals)))
# transform curves into tibble for plotting
plot_tibble <- tibble(ids = unlist(map(.x = 1:length(curves),
.f = function(i) rep(x = ids[i], times = length(curves[[i]]$args)))),
args = unlist(map(.x = curves,
.f = function(c) c$args)),
vals = unlist(map(.x = curves,
.f = function(c) c$vals)))
styler:::style_active_file()
# transform curves into tibble for plotting
plot_tibble <- tibble(
ids = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = ids[i], times = length(curves[[i]]$args))
)),
args = unlist(map(
.x = curves,
.f = function(c) c$args
)),
vals = unlist(map(
.x = curves,
.f = function(c) c$vals
)),
nsamples = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$num_samples[i], times = length(curves[[i]]$args))
)),
nsamples = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$num_outliers[i], times = length(curves[[i]]$args))
)),
certainties = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$certainties[i], times = length(curves[[i]]$args))
))
)
# transform curves into tibble for plotting
plot_tibble <- tibble(
ids = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = ids[i], times = length(curves[[i]]$args))
)),
args = unlist(map(
.x = curves,
.f = function(c) c$args
)),
vals = unlist(map(
.x = curves,
.f = function(c) c$vals
)),
n_samples = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$num_samples[i], times = length(curves[[i]]$args))
)),
n_outliers = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$num_outliers[i], times = length(curves[[i]]$args))
)),
certainties = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$certainties[i], times = length(curves[[i]]$args))
))
)
View(plot_tibble)
# transform curves into tibble for plotting
plot_tibble <- tibble(
ids = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = ids[i], times = length(curves[[i]]$args))
)),
args = unlist(map(
.x = curves,
.f = function(c) c$args
)),
args_zeroed = unlist(map(
.x = curves,
.f = function(c) c$args - c$args[1]
)),
vals = unlist(map(
.x = curves,
.f = function(c) c$vals
)),
n_samples = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$num_samples[i], times = length(curves[[i]]$args))
)),
n_outliers = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$num_outliers[i], times = length(curves[[i]]$args))
)),
certainties = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$certainties[i], times = length(curves[[i]]$args))
))
)
View(plot_tibble)
# transform curves into tibble for plotting
plot_tibble <- tibble(
ids = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = ids[i], times = length(curves[[i]]$args))
)),
args = unlist(map(
.x = curves,
.f = function(c) c$args
)),
args_zeroed = unlist(map(
.x = curves,
.f = function(c) c$args - c$args[1]
)),
vals = unlist(map(
.x = curves,
.f = function(c) c$vals
)),
n_samples = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$num_samples[i], times = length(curves[[i]]$args))
)),
n_outliers = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$num_outliers[i], times = length(curves[[i]]$args))
)),
certainties = unlist(map(
.x = 1:length(curves),
.f = function(i) rep(x = results$certainties[i], times = length(curves[[i]]$args))
))
) %>%
distinct(ids, args_zeroed, .keep_all = TRUE)
View(plot_tibble)
# create plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args, y + vals, col = certainties))
real_plot
# create plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args, y = vals, col = certainties))
real_plot
# create plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args, y = vals, col = certainties, group_by = ids))
# create plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args, y = vals, col = certainties, group = ids))
real_plot
# create plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args_zeroed, y = vals, col = certainties, group = ids))
real_plot
# create plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args_zeroed, y = vals, col = certainties, group = ids)) +
scale_color_gradient(low = "#0062ff", high = "#ff0000") +
theme_light()
real_plot
# create plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args_zeroed, y = vals, col = certainties, group = ids), alpha = 0.2) +
scale_color_gradient(low = "#0062ff", high = "#ff0000") +
theme_light()
real_plot
real_data <- TRUE
if (real_data) {
endanzug_data <- readRDS(file = paste0(endanzug_path, "schra.RDS"))
}
# sample size for sampling procedure
sample_size <- 1000
endanzug_path <- "~/F/data_local/Projekt_AMEIUS_Daten/"
### load real Endanzug-Data if possible
real_data <- TRUE
if (real_data) {
endanzug_data <- readRDS(file = paste0(endanzug_path, "schra.RDS"))
}
View(endanzug_data)
View(curves)
View(plot_tibble)
test <- map(
.x = curves,
.f = function(c) c$args - c$args[1]
)
test <- map(
.x = curves,
.f = function(c) c$vals
)
test <- unlist(map(
.x = curves,
.f = function(c) c$vals[1]
))
which(test >50)
# create plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args_zeroed, y = vals, col = certainties, group = ids), alpha = 0.2) +
scale_color_gradient(low = "#0062ff", high = "#ff0000") +
theme_light() +
theme(legend.position="bottom")
real_plot
real_plot <- ggplot(data = plot_tibble) +
geom_line(aes(x = args_zeroed, y = vals, col = certainties, group = ids), alpha = 0.2) +
scale_color_gradient(low = "#0062ff", high = "#ff0000") +
theme_light() +
theme(legend.position="bottom")
real_plot
ggsave(filename = 'real_data_plot.png', plot = real_plot, path = '../../material/',
width = 12, height = 8, units = 'in')
