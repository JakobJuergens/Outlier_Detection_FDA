x = cumsum(rnorm(n = n_obs, mean = 0, sd = 1)),
y = cumsum(rnorm(n = n_obs, mean = 0, sd = 1)),
col = 1:n_obs
)
rw_plot <- ggplot(data = data) +
geom_path(aes(x = x, y = y, col = col)) +
scale_colour_gradientn(colours=rainbow(100)) +
theme_light()
rw_plot
Library (plotly)
P <- plot_ly(z=valcano, type =”surface”)
P
library(plotly)
P <- plot_ly(z=valcano, type =”surface”)
P
install.packages('plotly')
library(plotly)
P <- plot_ly(z=valcano, type =”surface”)
P
library(plotly)
P <- plot_ly(z=volcano, type =”surface”)
P
?plot_ly
library(plotly)
P <- plot_ly(z=volcano, type = 'surface')
P
data(volcano)
force(volcano)
View(volcano)
library(fda)
small_basis <- create.bspline.basis(rangeval = c(0, 1), nbasis = 4)
small_basis <- create.bspline.basis(rangeval = c(0, 1), nbasis = 20, norder = 4)
small_basis <- create.bspline.basis(rangeval = c(0, 1), nbasis = 20, norder = 4)
eval_basis <- eval.basis(evalarg = seq(0, 1, 401), basisobj = small_basis)
View(eval_basis)
small_basis <- create.bspline.basis(rangeval = c(0, 1), nbasis = 20, norder = 4)
eval_basis <- eval.basis(evalarg = seq(0, 1, 401), basisobj = small_basis)
View(small_basis)
eval_basis <- eval.basis(evalarg = seq(0, 1, length.out = 401), basisobj = small_basis)
View(eval_basis)
n=10
sigma=3
beta_true<-c(2,3,4)
myDataGenerator <- function(n, beta, X=NULL, sigma=3){
if(is.null(X)){X<-cbind(rep(1,n),runif(n,min=2,max=10),runif(n, min=12,max=22))
}
eps<-rnorm(n,sd=sigma)    ## here epsilon always give the same value
Y<-X %*% beta+eps
data<-data.frame("Y"=Y,"X_1"=X[,1],"X_2"=X[,2],"X_3"=X[,3])
## return data
return(data)
}
## draw one specific realization from population
test_data<-myDataGenerator(n=10,beta=beta_true)
## Generate new Y data conditionally on X
X_conditional<-cbind(test_data$X_1,test_data$X_2,test_data$X_3)
test_data_con<-myDataGenerator(n=10,beta=beta_true,X=X_conditional)
styler:::style_active_file()
myDataGenerator <- function(n, beta, X = NULL, sigma = 3) {
if (is.null(X)) {
X <- cbind(
rep(1, n),
runif(n, min = 2, max = 10),
runif(n, min = 12, max = 22)
)
}
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
Y <- X %*% beta + eps
data <- data.frame("Y" = Y, "X_1" = X[, 1], "X_2" = X[, 2], "X_3" = X[, 3])
## return data
return(data)
}
## draw one specific realization from population
test_data <- myDataGenerator(n = 10, beta = beta_true)
View(test_data)
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional)
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
myDataGenerator <- function(n, beta, X = NULL, sigma = 3) {
if (is.null(X)) {
X <- cbind(
rep(1, n),
runif(n, min = 2, max = 10),
runif(n, min = 12, max = 22)
)
}
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
Y <- X %*% beta + eps
data <- data.frame("Y" = Y, "X_1" = X[, 1], "X_2" = X[, 2], "X_3" = X[, 3], eps = eps)
## return data
return(data)
}
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
n <- 10
sigma <- 3
beta_true <- c(2, 3, 4)
myDataGenerator <- function(n, beta, X = NULL, sigma = 3) {
if (is.null(X)) {
X <- cbind(
rep(1, n),
runif(n, min = 2, max = 10),
runif(n, min = 12, max = 22)
)
}
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
Y <- X %*% beta + eps
data <- data.frame("Y" = Y, "X_1" = X[, 1], "X_2" = X[, 2], "X_3" = X[, 3], eps = eps)
## return data
return(data)
}
## draw one specific realization from population
test_data <- myDataGenerator(n = 10, beta = beta_true)
## Generate new Y data conditionally on X
X_conditional <- cbind(test_data$X_1, test_data$X_2, test_data$X_3)
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
n <- 10
sigma <- 3
beta_true <- c(2, 3, 4)
myDataGenerator <- function(n, beta, X = NULL, sigma = 3) {
if (is.null(X)) {
X <- cbind(
rep(1, n),
runif(n, min = 2, max = 10),
runif(n, min = 12, max = 22)
)
}
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
Y <- X %*% beta + eps
data <- data.frame("Y" = Y, "X_1" = X[, 1], "X_2" = X[, 2], "X_3" = X[, 3], eps = eps)
## return data
return(data)
}
## draw one specific realization from population
test_data <- myDataGenerator(n = 10, beta = beta_true)
## Generate new Y data conditionally on X
X_conditional <- cbind(test_data$X_1, test_data$X_2, test_data$X_3)
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
n <- 10
sigma <- 3
beta_true <- c(2, 3, 4)
myDataGenerator <- function(n, beta, X = NULL, sigma = 3) {
if (is.null(X)) {
X <- cbind(
rep(1, n),
runif(n, min = 2, max = 10),
runif(n, min = 12, max = 22)
)
}
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
Y <- X %*% beta + eps
data <- data.frame("Y" = Y, "X_1" = X[, 1], "X_2" = X[, 2], "X_3" = X[, 3], eps = eps)
## return data
return(data)
}
## draw one specific realization from population
test_data <- myDataGenerator(n = 10, beta = beta_true)
## Generate new Y data conditionally on X
X_conditional <- cbind(test_data$X_1, test_data$X_2, test_data$X_3)
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
n <- 10
sigma <- 3
beta_true <- c(2, 3, 4)
myDataGenerator <- function(n, beta, X = NULL, sigma = 3) {
if (is.null(X)) {
X <- cbind(
rep(1, n),
runif(n, min = 2, max = 10),
runif(n, min = 12, max = 22)
)
}
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
Y <- X %*% beta + eps
data <- data.frame("Y" = Y, "X_1" = X[, 1], "X_2" = X[, 2], "X_3" = X[, 3], eps = eps)
## return data
return(data)
}
## draw one specific realization from population
test_data <- myDataGenerator(n = 10, beta = beta_true)
## Generate new Y data conditionally on X
X_conditional <- cbind(test_data$X_1, test_data$X_2, test_data$X_3)
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
n <- 10
sigma <- 3
beta_true <- c(2, 3, 4)
myDataGenerator <- function(n, beta, X = NULL, sigma = 3) {
if (is.null(X)) {
X <- cbind(
rep(1, n),
runif(n, min = 2, max = 10),
runif(n, min = 12, max = 22)
)
}
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
Y <- X %*% beta + eps
data <- data.frame("Y" = Y, "X_1" = X[, 1], "X_2" = X[, 2], "X_3" = X[, 3], eps = eps)
## return data
return(data)
}
## draw one specific realization from population
test_data <- myDataGenerator(n = 10, beta = beta_true)
## Generate new Y data conditionally on X
X_conditional <- cbind(test_data$X_1, test_data$X_2, test_data$X_3)
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
n <- 10
sigma <- 3
beta_true <- c(2, 3, 4)
myDataGenerator <- function(n, beta, X = NULL, sigma = 3) {
if (is.null(X)) {
X <- cbind(
rep(1, n),
runif(n, min = 2, max = 10),
runif(n, min = 12, max = 22)
)
}
eps <- rnorm(n, sd = sigma) ## here epsilon always give the same value
Y <- X %*% beta + eps
data <- data.frame("Y" = Y, "X_1" = X[, 1], "X_2" = X[, 2], "X_3" = X[, 3], eps = eps)
## return data
return(data)
}
## draw one specific realization from population
test_data <- myDataGenerator(n = 10, beta = beta_true)
## Generate new Y data conditionally on X
X_conditional <- cbind(test_data$X_1, test_data$X_2, test_data$X_3)
(test_data_con <- myDataGenerator(n = 10, beta = beta_true, X = X_conditional))
?source
setwd("~/F/Cloud/Studium/Master/Economics/2. Semester/Microeconometrics_github/project/ose-data-science-course-projeect-JakobJuergens")
library(shiny)
library(shinydashboard)
library(tidyverse)
### load data for different data sets
# set 1:
set_1_summary <- readRDS(file = "./data/Set_1/summary.RDS")
set_1_tibble <- readRDS(file = "./data/Set_1/shiny_tibble.RDS")
# set 2:
set_2_tibble <- readRDS(file = "data/Set_2/shiny_tibble.RDS")
set_2_summary <- list(original = unique(set_2_tibble$ids[which(set_2_tibble$outlier == TRUE)]))
# set 3:
set_3_tibble <- readRDS(file = "data/Set_3/shiny_tibble.RDS")
set_3_summary <- list(original = unique(set_3_tibble$ids[which(set_3_tibble$outlier == TRUE)]))
header <- dashboardHeader(
title = "Outlier Detection"
)
sidebar <- dashboardSidebar(
selectInput("SET", "Data Set",
c("Data Set 1" = "set_1",
"Data Set 2" = "set_2",
"Data Set 3" = "set_3")),
sliderInput("OUT_THR", "Observations over which certainty threshold shall be marked as outliers?", min = 0, max = 1, value = 0.5, step = 0.01),
sliderInput("CERT_THR", "Show observations with certainty values over this threshold:", min = 0, max = 1, value = 0.5, step = 0.01),
numericInput("OBS_ID", "Which observation do you want to highlight?", value = NA),
numericInput("L_BORDER", "What is the lower bound of the window you want to see?", value = NA),
numericInput("R_BORDER", "What is the upper bound of the window you want to see?", value = NA)
)
body <- dashboardBody(
column(width = 12,
fluidRow(width = 12,
column(width = 7,
box(title = "Description",
width = 9, h4("This dashboard visualizes the method of outlier detection used in the project. \n"))),
column(width = 5,
infoBox("Observations", textOutput("n_obs"), icon = icon("list")),
infoBox("Flagged", textOutput("nflagged"), icon = icon("list")))
)
),
fluidRow(width = 12,
box(width = 12,
title = "Plotted Observations",
plotOutput("my_plot"))
),
fluidRow(width = 12,
column(12,
tabBox(width = 12,
title = 'Information',
tabPanel("Flagged Observations",
h3("Flagged observations: "),
h4(textOutput("flagged")),
),
tabPanel("Missed Outliers",
h3("Missed Outliers: "),
h4(textOutput("missed")),
),
tabPanel("False Outliers:",
h3("False outliers: "),
h4(textOutput("false")),
)
)
)
)
)
ui <- dashboardPage(
header,
sidebar,
body
)
server <- function(input, output, session) {
my_tibble <- reactive({
if(input$SET == "set_1"){my_tibble <- set_1_tibble}
if(input$SET == "set_2"){my_tibble <- set_2_tibble}
if(input$SET == "set_3"){my_tibble <- set_3_tibble}
my_tibble
})
info_list <- reactive({
if(input$SET == "set_1"){info_list <- set_1_summary}
if(input$SET == "set_2"){info_list <- set_2_summary}
if(input$SET == "set_3"){info_list <- set_3_summary}
info_list
})
show_which <- reactive({
tmp <- my_tibble()
if(input$SET == "set_1"){
show_which <- 1:(dim(tmp)[1])
} else{
CERT_THR <- input$CERT_THR
show_which <- sort(unique(c(which(tmp$cert >= CERT_THR),
which(tmp$ids == input$OBS_ID))))
}
show_which
})
out_which <- reactive({
tmp <- my_tibble()
if(input$SET == "set_1"){
out_which <- unique(tmp$ids[which(tmp$flagged == TRUE)])
} else{
OUT_THR <- input$OUT_THR
out_which <- unique(tmp$ids[which(tmp$cert >= OUT_THR)])
}
out_which
})
output$n_obs <- renderText(length(unique(my_tibble()$ids))) # works
output$flagged <- renderText(out_which())
output$nflagged <- renderText(length(out_which()))
output$missed <- renderText(setdiff(info_list()$original, out_which()))
output$false <- renderText(setdiff(out_which(), info_list()$original))
sizes <- reactive({
tmp <- my_tibble()
s <- rep(0.1, times = dim(tmp)[1])
focus <- which(tmp$ids == input$OBS_ID)
s[focus] <- 5
s
})
output$my_plot <- renderPlot({
plot_tibble <- my_tibble()[show_which(),]
if(input$SET != "set_1"){
ggplot(data = plot_tibble) +
geom_line(aes(x = x, y = y, col = cert, group = ids), alpha = 50/length(unique(plot_tibble$ids[show_which()]))) +
geom_line(data = plot_tibble[which(plot_tibble$ids == input$OBS_ID),],
aes(x = x, y = y), col = "black", lwd = 0.5) +
scale_color_gradient(low = "#0062ff", high = "#ff0000") +
theme(text=element_text(size=16, family="Serif")) +
xlim(ifelse(!is.na(input$L_BORDER), input$L_BORDER, 0), ifelse(!is.na(input$R_BORDER), input$R_BORDER, 1)) +
guides(col = "none")
} else{
ggplot(data = plot_tibble) +
geom_line(aes(x = x, y = y, col = !flagged, group = ids), alpha = 50/length(unique(plot_tibble$ids[show_which()]))) +
geom_line(data = plot_tibble[which(plot_tibble$ids == input$OBS_ID),],
aes(x = x, y = y), col = "black", lwd = 0.5) +
theme(text=element_text(size=16, family="Serif")) +
xlim(ifelse(!is.na(input$L_BORDER), input$L_BORDER, 0), ifelse(!is.na(input$R_BORDER), input$R_BORDER, 1)) +
guides(col = "none")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(tidyverse)
### load data for different data sets
# set 1:
set_1_summary <- readRDS(file = "./data/Set_1/summary.RDS")
set_1_tibble <- readRDS(file = "./data/Set_1/shiny_tibble.RDS")
# set 2:
set_2_tibble <- readRDS(file = "data/Set_2/shiny_tibble.RDS")
set_2_summary <- list(original = unique(set_2_tibble$ids[which(set_2_tibble$outlier == TRUE)]))
# set 3:
set_3_tibble <- readRDS(file = "data/Set_3/shiny_tibble.RDS")
set_3_summary <- list(original = unique(set_3_tibble$ids[which(set_3_tibble$outlier == TRUE)]))
header <- dashboardHeader(
title = "Outlier Detection"
)
sidebar <- dashboardSidebar(
selectInput("SET", "Data Set",
c("Data Set 1" = "set_1",
"Data Set 2" = "set_2",
"Data Set 3" = "set_3")),
sliderInput("OUT_THR", "Observations over which certainty threshold shall be marked as outliers?", min = 0, max = 1, value = 0.5, step = 0.01),
sliderInput("CERT_THR", "Show observations with certainty values over this threshold:", min = 0, max = 1, value = 0.5, step = 0.01),
numericInput("OBS_ID", "Which observation do you want to highlight?", value = NA),
numericInput("L_BORDER", "What is the lower bound of the window you want to see?", value = NA),
numericInput("R_BORDER", "What is the upper bound of the window you want to see?", value = NA)
)
body <- dashboardBody(
column(width = 12,
fluidRow(width = 12,
column(width = 7,
box(title = "Description",
width = 9, h4("This dashboard visualizes the method of outlier detection used in the project. \n"))),
column(width = 5,
infoBox("Observations", textOutput("n_obs"), icon = icon("list")),
infoBox("Flagged", textOutput("nflagged"), icon = icon("list")))
)
),
fluidRow(width = 12,
box(width = 12,
title = "Plotted Observations",
plotOutput("my_plot"))
),
fluidRow(width = 12,
column(12,
tabBox(width = 12,
title = 'Information',
tabPanel("Flagged Observations",
h3("Flagged observations: "),
h4(textOutput("flagged")),
),
tabPanel("Missed Outliers",
h3("Missed Outliers: "),
h4(textOutput("missed")),
),
tabPanel("False Outliers:",
h3("False outliers: "),
h4(textOutput("false")),
)
)
)
)
)
ui <- dashboardPage(
header,
sidebar,
body
)
server <- function(input, output, session) {
my_tibble <- reactive({
if(input$SET == "set_1"){my_tibble <- set_1_tibble}
if(input$SET == "set_2"){my_tibble <- set_2_tibble}
if(input$SET == "set_3"){my_tibble <- set_3_tibble}
my_tibble
})
info_list <- reactive({
if(input$SET == "set_1"){info_list <- set_1_summary}
if(input$SET == "set_2"){info_list <- set_2_summary}
if(input$SET == "set_3"){info_list <- set_3_summary}
info_list
})
show_which <- reactive({
tmp <- my_tibble()
if(input$SET == "set_1"){
show_which <- 1:(dim(tmp)[1])
} else{
CERT_THR <- input$CERT_THR
show_which <- sort(unique(c(which(tmp$cert >= CERT_THR),
which(tmp$ids == input$OBS_ID))))
}
show_which
})
out_which <- reactive({
tmp <- my_tibble()
if(input$SET == "set_1"){
out_which <- unique(tmp$ids[which(tmp$flagged == TRUE)])
} else{
OUT_THR <- input$OUT_THR
out_which <- unique(tmp$ids[which(tmp$cert >= OUT_THR)])
}
out_which
})
output$n_obs <- renderText(length(unique(my_tibble()$ids))) # works
output$flagged <- renderText(out_which())
output$nflagged <- renderText(length(out_which()))
output$missed <- renderText(setdiff(info_list()$original, out_which()))
output$false <- renderText(setdiff(out_which(), info_list()$original))
sizes <- reactive({
tmp <- my_tibble()
s <- rep(0.1, times = dim(tmp)[1])
focus <- which(tmp$ids == input$OBS_ID)
s[focus] <- 5
s
})
output$my_plot <- renderPlot({
plot_tibble <- my_tibble()[show_which(),]
if(input$SET != "set_1"){
ggplot(data = plot_tibble) +
geom_line(aes(x = x, y = y, col = cert, group = ids), alpha = 50/length(unique(plot_tibble$ids[show_which()]))) +
geom_line(data = plot_tibble[which(plot_tibble$ids == input$OBS_ID),],
aes(x = x, y = y), col = "black", lwd = 0.5) +
scale_color_gradient(low = "#0062ff", high = "#ff0000") +
theme(text=element_text(size=16, family="Serif")) +
xlim(ifelse(!is.na(input$L_BORDER), input$L_BORDER, 0), ifelse(!is.na(input$R_BORDER), input$R_BORDER, 1)) +
guides(col = "none")
} else{
ggplot(data = plot_tibble) +
geom_line(aes(x = x, y = y, col = !flagged, group = ids), alpha = 50/length(unique(plot_tibble$ids[show_which()]))) +
geom_line(data = plot_tibble[which(plot_tibble$ids == input$OBS_ID),],
aes(x = x, y = y), col = "black", lwd = 0.5) +
theme(text=element_text(size=16, family="Serif")) +
xlim(ifelse(!is.na(input$L_BORDER), input$L_BORDER, 0), ifelse(!is.na(input$R_BORDER), input$R_BORDER, 1)) +
guides(col = "none")
}
})
}
shinyApp(ui, server)
